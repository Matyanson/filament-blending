#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba8, binding = 0) uniform image2D output_image;

// Shared SSBOs with one entry per filament ID
layout(std430, binding = 1) buffer BasePoints {
    vec3 base_points[];         // RGB color per filament
};
layout(std430, binding = 2) buffer BasePointsAlpha {
    float base_points_alpha[];  // alpha per single layer
};

// 3D volume of filament IDs (0..255)
layout(binding = 3) uniform usampler3D voxelData;


void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 img_size = imageSize(output_image);
    if (pos.x >= img_size.x || pos.y >= img_size.y) return;

    vec3 volumeSize = vec3(textureSize(voxelData, 0));
    
    vec2 uv = vec2(pos) / vec2(img_size);
    float depth = volumeSize.z;

    vec3 accum = vec3(0.0);
    for(float i = 0; i < depth; i++) {
        vec3 tc = vec3(uv, i / depth);
        uint fid = texture(voxelData, tc).r;
        if(fid == 255) continue;

        vec3 col = base_points[fid];
        float a1 = base_points_alpha[fid];

        accum = mix(accum, col, a1);
    }

    vec4 final_color = vec4(accum, 1.0);
    imageStore(output_image, pos, final_color);
}
