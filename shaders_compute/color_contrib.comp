#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba8, binding = 0) uniform image2D target_image;

layout(std430, binding = 3) buffer FilamentOrder {
    int filament_order[];
};

layout(std430, binding = 4) buffer OutputContributions {
    float out_contributions[];
};

layout(std430, binding = 5) buffer OutputIndicies {
    ivec4 out_indexes[];    // what base_points we are mixing
};

layout(std430, binding = 6) buffer OutputCoords {
    vec4 out_bary[];    // ratio of the base_points we are mixing with
};


float layer_count_to_alpha(float single_layer_alpha, int count) {
    return 1.0 - pow((1.0 - single_layer_alpha), count);
}

float alpha_to_layer_count(float target_alpha, float single_layer_alpha) {
    return log(1.0 - target_alpha) / log(1.0 - single_layer_alpha);
}


void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 img_size = imageSize(target_image);
    if (pos.x >= img_size.x || pos.y >= img_size.y) return;

    int pixel_index = pos.y * img_size.x + pos.x;
    int filament_layer_count = filament_order.length();
    ivec4 idxs = out_indexes[pixel_index];
    vec4 bary = out_bary[pixel_index];

    // itterate filaments
    for(int i = 0; i < filament_layer_count; i++) {
        int base_point_index = filament_order[i];

        // find if we use this base_point in the mix & retrieve its weight in the mix
        float weight = 0.0;
        if(idxs.x == base_point_index) {
            weight = bary.x;
        }
        else if (idxs.y == base_point_index) {
            weight = bary.y;
        }
        else if (idxs.z == base_point_index) {
            weight = bary.z;
        }
        else if (idxs.w == base_point_index) {
            weight = bary.w;
        }
        else {
            weight = 0.0;
        }

        // save to output buffer
        int output_buf_index = pixel_index * filament_layer_count + i;
        out_contributions[output_buf_index] = weight;
    }
}